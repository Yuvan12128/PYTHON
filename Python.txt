Python :
22.8.25:
general purpose high level programming language 

father of python Guido Van Rossam

1991 - python 2

python 3 

statically typed programming 

dynamically type programming 

paradigm - idea:
multiparadigm:

python 3 is a new language is released 2008

interpreted:
API - java/python 

web application -java/ php - wordpress
mobile appplication - java/ objective C
AI /ML/ DS- Python/ Java / Scala
Rupy

python - multi paradigm 

java script --> OOP, Function programming procedure oriended  programming 

interpreted:
Line by line translation:

python code  --> 0,1s --> interpreter/ Compiler 

compiler - translate -
interpreter - Line By line Translation

mobile application dev - performance 

java - two levels translation 
compiler - JIT compiler 
------------------------
using python

web application 
mobile application
games 
db 
network programming 
Data science / machine learning / AI
internet of things 
---------------------------------
1. simple easy to learn 
2. open source and free
3. high level language 
4. platform independent 
liux / windows 
python virtual machine 
5. portability 
6. Dynamically typed 
no need of explicit data types in python.
7. multiparadigm 
8. libraries/ modules  
9.

flavours of python:
1. CPython 
2. Jython --> JVM - java virtual machine
3. IronPython C# .NET 
4. RubyPython
5. PyPy: High Performance python
JIT compiler (Just in time )
6. AnacondaPython: 
Large Set of Data Processing 

web scrapping 
camera
amazon flipkart

practice:
---------
print('hello yuvan shankar this is my first program')
print(5+6)
print(5+4*5)
print((2+2)*4)
print('-----------------')
print(100/3)#division
print(100-3)
print(100//3)#floor division
print(100*3)
print(2**3)#power 2 power 3
print(10,'yuvan')

print(100%7)#division 

print(100%9)

print(100%2)

output:
------
hello yuvan shankar this is my first program
11
25
16
-----------------
33.333333333333336
97
33
300
8
10 yuvan
2
1
0
-------------------------------------------------------------

24.8.25:
print(2**3+2*3)
print((2**3)+2*3)
print((2**3+2)*3)
output:
14
14
30
-------------------------------

Identifiers - Variables - reference Variables:
------------------------------------------------
# alphabets - small / capital 
# number are allowed
# Underscore is allowed
# No other special character is allowed 
# don't start to numbers


doorNo = 15 # = --> Assignment operator

print(doorNo)

name = 'yuvan shankar'
name = "yuvan "

print(name)

out:
15
yuvan 
-----------------------
doorNo = 15 # = --> Assignment operator

print(doorNo)
--------------------------------------

tamil_1=90
print(tamil_1)
tamil2=98
print(tamil2)
TAMIL=40
print(TAMIL)
# 1TAMIL=40
# print(1TAMIL) 

_tamil=200  # private variable
print(_tamil)

__english=40 #double underscore 
print(__english)
_maths_=101 #NameError: name '_math_' is not defined. Did you mean: '_maths_'?
print(_math_)

Rules :
--> No special characters allowed 
--> No space is allowed 
--> Underscore is allowed (starting, middle, end)
--> Numbers are allowed, but should not start with number
--> case sensitive 
--> No limitations, any length
--> Reserved words in python should not be used as identifiers
--> _, __starting -> private variable
--> magic methods -> __add__ predefined function.
================================================================================
Python Reserved Words:
---------------------

33 Reserved words 

True / False / None 
and or not is 
if elif else 
while for break continue return yield in 
try except finally raise assert 
notice :import keyword (next) keyword.kwlist
yuvan@yuvan-MS-7C89:~/Documents/python$ python3
Python 3.12.3 (main, Jun 18 2025, 17:59:45) [GCC 13.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
>>> 
-------------------------------------------------------------------------------------

DATATYPES:
Dynamically Typed Programming Language
Duck Typing Language 
no=10  # integer
result =true 
result = false
	we never mention datatype before variables (Identifiers) explicitly in python.
	Based on the data (value) we provide, python will automatically assign  corresponding datatype.
	
In Built Datatypes:14

int 
float
complex
bool 
str 
bytes
bytearray
range
list 
set
frozenset
tuple
dict
None

no = 10
print(no) # input - parameter / argument
          # action - function / method / procedure / routine
print(type(no))

no = 1.0

print(type(no))

result =True
print(type(result))
out:
10
<class 'int'>
<class 'float'>
<class 'bool'>
=========================================================================

name = 'yuvan'
print(name)
print(type(name))
name = "yuvan"
print(type(name))
print(id(name))

no = 1
print(no)
print(id(no))
out:
----
yuvan
<class 'str'>
<class 'str'>
128424211367040
1
11760680

-----------------------------------------------
name = 'yuvan'
print(len(name))

no = 1000
print(len(no))
out:
5
Traceback (most recent call last):
  File "/home/yuvan/Documents/python/main.py", line 5, in <module>
    print(len(no))
          ^^^^^^^
TypeError: object of type 'int' has no len()
------------------------------------------------------------------
no=123.9875678959785
print(round(no))
print(round(no,2))
print(round(no,4))
out:
124
123.99
123.9876
-------------------------
int datatype
 1. Decimal Form 
 2. Binary from -> 0s and 1s
 3. octal form -> base 8: 01234567
 4. hexadecimal form ->
