Python :
22.8.25:
general purpose high level programming language 

father of python Guido Van Rossam

1991 - python 2

python 3 

statically typed programming 

dynamically type programming 

paradigm - idea:
multiparadigm:

python 3 is a new language is released 2008

interpreted:
API - java/python 

web application -java/ php - wordpress
mobile appplication - java/ objective C
AI /ML/ DS- Python/ Java / Scala
Rupy

python - multi paradigm 

java script --> OOP, Function programming procedure oriended  programming 

interpreted:
Line by line translation:

python code  --> 0,1s --> interpreter/ Compiler 

compiler - translate -
interpreter - Line By line Translation

mobile application dev - performance 

java - two levels translation 
compiler - JIT compiler 
------------------------
using python

web application 
mobile application
games 
db 
network programming 
Data science / machine learning / AI
internet of things 
---------------------------------
1. simple easy to learn 
2. open source and free
3. high level language 
4. platform independent 
liux / windows 
python virtual machine 
5. portability 
6. Dynamically typed 
no need of explicit data types in python.
7. multiparadigm 
8. libraries/ modules  
9.

flavours of python:
1. CPython 
2. Jython --> JVM - java virtual machine
3. IronPython C# .NET 
4. RubyPython
5. PyPy: High Performance python
JIT compiler (Just in time )
6. AnacondaPython: 
Large Set of Data Processing 

web scrapping 
camera
amazon flipkart

practice:
---------
print('hello yuvan shankar this is my first program')
print(5+6)
print(5+4*5)
print((2+2)*4)
print('-----------------')
print(100/3)#division
print(100-3)
print(100//3)#floor division
print(100*3)
print(2**3)#power 2 power 3
print(10,'yuvan')

print(100%7)#division 

print(100%9)

print(100%2)

output:
------
hello yuvan shankar this is my first program
11
25
16
-----------------
33.333333333333336
97
33
300
8
10 yuvan
2
1
0
-------------------------------------------------------------

24.8.25:
print(2**3+2*3)
print((2**3)+2*3)
print((2**3+2)*3)
output:
14
14
30
-------------------------------

Identifiers - Variables - reference Variables:
------------------------------------------------
# alphabets - small / capital 
# number are allowed
# Underscore is allowed
# No other special character is allowed 
# don't start to numbers


doorNo = 15 # = --> Assignment operator

print(doorNo)

name = 'yuvan shankar'
name = "yuvan "

print(name)

out:
15
yuvan 
-----------------------
doorNo = 15 # = --> Assignment operator

print(doorNo)
--------------------------------------

tamil_1=90
print(tamil_1)
tamil2=98
print(tamil2)
TAMIL=40
print(TAMIL)
# 1TAMIL=40
# print(1TAMIL) 

_tamil=200  # private variable
print(_tamil)

__english=40 #double underscore 
print(__english)
_maths_=101 #NameError: name '_math_' is not defined. Did you mean: '_maths_'?
print(_math_)

Rules :
--> No special characters allowed 
--> No space is allowed 
--> Underscore is allowed (starting, middle, end)
--> Numbers are allowed, but should not start with number
--> case sensitive 
--> No limitations, any length
--> Reserved words in python should not be used as identifiers
--> _, __starting -> private variable
--> magic methods -> __add__ predefined function.
================================================================================
Python Reserved Words:
---------------------

33 Reserved words 

True / False / None 
and or not is 
if elif else 
while for break continue return yield in 
try except finally raise assert 
notice :import keyword (next) keyword.kwlist
yuvan@yuvan-MS-7C89:~/Documents/python$ python3
Python 3.12.3 (main, Jun 18 2025, 17:59:45) [GCC 13.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
>>> 
-------------------------------------------------------------------------------------

DATATYPES:
Dynamically Typed Programming Language
Duck Typing Language 
no=10  # integer
result =true 
result = false
	we never mention datatype before variables (Identifiers) explicitly in python.
	Based on the data (value) we provide, python will automatically assign  corresponding datatype.
	
In Built Datatypes:14

int 
float
complex
bool 
str 
bytes
bytearray
range
list 
set
frozenset
tuple
dict
None

no = 10
print(no) # input - parameter / argument
          # action - function / method / procedure / routine
print(type(no))

no = 1.0

print(type(no))

result =True
print(type(result))
out:
10
<class 'int'>
<class 'float'>
<class 'bool'>
=========================================================================

name = 'yuvan'
print(name)
print(type(name))
name = "yuvan"
print(type(name))
print(id(name))

no = 1
print(no)
print(id(no))
out:
----
yuvan
<class 'str'>
<class 'str'>
128424211367040
1
11760680

-----------------------------------------------
name = 'yuvan'
print(len(name))

no = 1000
print(len(no))
out:
5
Traceback (most recent call last):
  File "/home/yuvan/Documents/python/main.py", line 5, in <module>
    print(len(no))
          ^^^^^^^
TypeError: object of type 'int' has no len()
------------------------------------------------------------------
no=123.9875678959785
print(round(no))
print(round(no,2))
print(round(no,4))
out:
124
123.99
123.9876
-------------------------
int datatype
 1. Decimal Form 
 2. Binary from -> 0s and 1s
 3. octal form -> base 8: 0 1 2 3 4 5 6 7
 4. hexadecimal form -> for 16 0 9 ABCDEF
------------------------------------------ 
| Decimal | Binary | Octal | Hexadecimal |
| ------- | ------ | ----- | ----------- |
| 0       | 0      | 0     | 0           |
| 1       | 1      | 1     | 1           |
| 2       | 10     | 2     | 2           |
| 3       | 11     | 3     | 3           |
| 4       | 100    | 4     | 4           |
| 5       | 101    | 5     | 5           |
| 6       | 110    | 6     | 6           |
| 7       | 111    | 7     | 7           |
| 8       | 1000   | 10    | 8           |
| 9       | 1001   | 11    | 9           |
| 10      | 1010   | 12    | A           |
| 11      | 1011   | 13    | B           |
| 12      | 1100   | 14    | C           |
| 13      | 1101   | 15    | D           |
| 14      | 1110   | 16    | E           |
---------------------------------------------
octal Form base:
no = 0o776
print(no)
no = 0O777
print(no)
out:
510
511
Hexadecimal form :
no = 0X123
print(no)
no=0XABC
print(no)
no=0XBCA
print(hex(no))
out:
291
2748
0xbca

functions(); 
------------
print()
type()
id()
len()
bin()
oct()
hex()

===========================

no = bin(20)
print(no)
no=oct(20)
print(no)
no=hex(20)
print(no)
out:
0b10100
0o24
0x14

====================
Float datatype:
no=1.2323232323
print(no)
print(type(no))
no2=7.7e3 #7.7 * 1000
print(no2)
out:
1.2323232323
<class 'float'>
7700.0
--------------------------------
#Complex datatype:

#Real part + Imaginary Part

no=5+10j
print(no)
print(type(no))

no2 = 10+3j

total = no+no2
print(total)
print(no.real)
print(no.imag)
------------------------------
no1=10  #assignment operator 
no2=20
print(no1<no2) #10<20   True
print(no1>no2) #10>20   False
print(no1==no2) #comparison equal
print(no1!=no2)

present = True
print(present)
print(type(present))

print(True+True)
-------------------------------
25.08.25:
---------
str Datatype:
-------------
word / paragraph

name = 'yuvan'
print(name)
name = "yuvan"
print(name)

sen='''"'yuvan' mail id is yuvan12128@gmail.com"'''
sen="""'yuvan' mail id is yuvan12128@gmail.com"""
print(sen)

address = """ 5/4 Amma Ponnu Nagar,
                Avinangudi 606 111."""
                
print(address)
out:
----
yuvan
yuvan
'yuvan' mail id is yuvan12128@gmail.com
 5/4 Amma Ponnu Nagar,
                Avinangudi 606 111.
=================================================
name = 'muthu'
city = 'chennai'

print(name+city)
print(name,city)
out:
muthuchennai
muthu chennai
===============================================
name = 'kalai'
pincode = 11
print(name,pincode)
out:
kalai 11
==============================================
#String slicing:
# 012345
#index - order
#forward / backward 
#forward - +ve - starts from zero
#backward - -ve - start from -1
name ="kalaiselve"

print(name[0:5])
print(name[5:])
print(name[:5])
print(name[2:5])
out:
kalai
selve
kalai
lai
============================================
name = 'abcdefghijklmnopqrstuvwxyz'
print(name[0:5])
print(name[-1:])
print(name[5:10])
print(name[-5:-1])
out:
abcde
z
fghij
vwxy
============================================
name='abcdefghijklmnopqrstuvwxyz'

print(name[::])
print(name[1:10])
print(name[1:20:5])
out:
abcdefghijklmnopqrstuvwxyz
bcdefghij
bglq
===============================================
name='abcdefghijklmnopqrstuvwxyz'

print(name[-5:-1])
print(name[::])
print(name[1:10])
print(name[1:26:2])# step operator 

vwxy
abcdefghijklmnopqrstuvwxyz
bcdefghij
bdfhjlnprtvxz
==================================================
#PALANIDROME
name='son'

print(name[::])

name2 =name[::-1]

print(name2)
print(name==name2)
====================================================
name = 'tub'
print(name*3)
tubtubtub
=================
tubtubtub

#Type casting:
#Converting one datatype to another datatype 
no=1423.789
print(int(no))

print(float(10))

1423
10.0
---------------------------------------------
#Complex()
print(complex(10))
print(complex(5.4))
print(complex(True))
print(complex(False))
print(complex('12'))
print(complex('12.7'))
out:
(10+0j)
(5.4+0j)
(1+0j)
0j
(12+0j)
(12.7+0j)
yuvan@yuvan
-------------------------------------------
#bool()

print(bool(0))
print(bool(1))
print(bool(1.5))
print(bool(0.3))
print(bool(0.0))
print(bool(5+4j))
print(bool(0+2j))
print(bool(0+0j))
print(bool('abc'))
print(bool(''))
print(bool('True'))
print(bool('False'))
out:
False
True
True
True
False
True
True
False
True
False
True
True
------------------------------------------
27.08.2025:
#str()

print(str(10))
print('price of a Tea is '+str(10))
#print('price of a Tea is '+10)
#TypeError: must be str, not int

print(str(34.5))
print(str(5+10j))
print(str(True))
print(str(False))
out:
10
price of a Tea is 10
34.5
(5+10j)
True
False
=============================================

14 datatypes - fundamental datatypes

All fundamental datatypes are Immutable.

immutability :
no =10
print(no)
print(id(no))
no2 = 100
print(id(no2))
print(no2)
#Immutability 
# Once we change value of an identifier belongs to fundamental datatype 
# it wont get changed in memory. Instead of that, a new memory location will be crated and the new value will be 
#updated there.
out:
10
11760968
11763848
100
=================================================
interview :
no1= 10
no2=10.0
print(no1 is not no2) # memory same  # identity operator
print(no1 == no2) # value same   # equality
out:
True
True
---------------------------------------------------

bytes 8 Bit 2 power 8

2*2*2*2*2*2*2*2

group of byte numbers

---------------------------------------------
values = [10,20,30,40,50,60]
print(values)
values = bytes(values)
print(values)
print(type(values))
print(values[0])
total=0 
for no in values : 
    print(no)
    total += no
print(total)
OUT 
[10, 20, 30, 40, 50, 60]
b'\n\x14\x1e(2<'
<class 'bytes'>
10
10
20
30
40
50
60
210
----------------------------------------------
no = int(input('inter any value : '))
print(type(no))
print(10+no)
out:
inter any value : 10
<class 'int'>
20
---------------------------------------------
# Odd even

no= int(input('enter any values : '))

if no%2==0:
    print('Even Number')
else:
    print('Odd Number')
    
out:
----
enter any values : 11
Odd Number
--------------------------------------------------
values = [10,21,30,41,50]

for no in values:
    if no%2==0:
        print(no)
        
out:
10
20
30
--------------------------------------------------
name1 = 'kannan'
name2 = 'kumaran'  #Lexicographical Order - dictionary 

print(name1>name2)
print(name2>name1)
print(name1==name2)
print(name1 != name2)
out:
False
True
False
True
------------------------------------------------
print('hi hello')
print('hi \t hello')
print('he \n hello')
#print('I'm fine')
print('I\'m fine')
out:
hi hello
hi 	 hello
he 
 hello
I'm fine
-------------------------------------------------

#constants 

MAX_ATTEMPTS =3
print(MAX_ATTEMPTS)

OUT:
3
-----------------------
assignment operators 
+= -= *= /= //=
%= **=

#Ternary operators (conditional operators)


----------------------------------------------

#Membership Operators
# in, not in

sen ='Today is Friday'
print('o'in sen)
print('t'in sen)

True
False
-----------------------------------------


#Operators Chaining

print(100<200)
print(100<200>300)

True 
False
------------------------------------------

#Bitwise operators

#   &  | ~ ^ >> <<

print(4|5)
print(4&5)
print(4^5) #XOR
print(~10) #Bitwise Compliment Operator
out:
5
4
1
-11
----------------------------------------------

print(5 or 4)

result =True
result2= not result

print(result)
print(result2)

5
True
False
------------------------

Modules:

variables, function call, function definition

print()
int()

===========================
def biggest(n1,n2): # function definition
    if n1>n2:
        print(no1,'is greater')
    else:
        print(no2,'is greater' )

no1 = int(input('enter number : '))

no2= int(input('enter number : '))

biggest(no1,no2) #function calling
#arguments for given function

enter number : 34
enter number : 677
677 is greater
------------------------------------

main.py
def biggest(n1,n2): # function definition
    if n1>n2:
        print(n1,'is greater')
    else:
        print(n2,'is greater' )
main2.py
import main
no1 = int(input('enter number : '))

no2= int(input('enter number : '))

main.biggest(no1,no2) #function calling
#arguments for given function
---------------------------------------





